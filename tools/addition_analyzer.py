from hexaddress import *

class OutOfRange(Exception):
    'Not valid address range'
    pass

class CannotOverflow(Exception):
    'Tried to overflow an failed'
    pass

class AdditionAnalyzer:

    SPACES = {
        #All additions without Extended or overload
        'REGULAR':                  [0x12, 0x13, 0x14, 0x16, 0x17, 0x1a, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe],
        #Extended additions have range 0x0 - 0xff but may require overload
        #All additions with overload
        'OVERLOAD':                 [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x84, 0x85, 0x86],
        #All additions exclusive to overload
        'EXCLUSIVE_OVERLOAD':       [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x15, 0x18, 0x19, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28],
        #All addition possible with Extended (NOTICE) you only gain 0xff from regular
        'EXTENDED_WITHOUT_OVERLOAD': [0x12, 0x13, 0x14, 0x16, 0x17, 0x1a, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
        #There is nothing exclusive to an overload
        #Which I can't get to with a [C2, C3, D]  + regular overload.

    }

    PATTERNS = {
        "SINGLE_BYTE_PATTERN": [0x9, 0xa, 0xd, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f], 
        "D_BYTE_PATTERN":      [0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf],
        }

    ADDITIONS = { #Used for dynamic programming

    }

    def __init__(self):
        self.address = None
        self.address_type = None
        self.requirements = {}

    def assign(self, address, address_type="target"):
        self.address = address
        self.address_type = address_type.lower()

    def is_valid_range(self):
        if self.address_type == 'target':
            lowest = 0x12121212
            highest = 0xffffffff
            if self.address.value >= lowest and self.address.value <= highest:
                return True
            else:
                return False
        elif self.address_type == 'operand':
            lowest = 0x09090909
            highest = 0xbfc3bfc3
            if self.address.value >= lowest and self.address.value <= highest:
                return True
            else:
                return False
        else:
            print "Invalid Address type"
            return False

    def find_value(self, byte, byte_list):
        #Consider changing to bisect method
        if byte in byte_list:
            return True
        else:
            return False

    def is_reachable_by_regular(self, byte):
        if self.find_value(byte, self.SPACES['REGULAR']):
            return True
        else:
            return False

    def is_reachable_by_extended(self, byte):
        #0x00 - 0xff can be reached
        return True

    def is_in_overload_space(self, byte):
        if self.find_value(byte, self.SPACES['OVERLOAD']):
            return True
        else:
            return False

    def is_in_exlusive_overload_space(self, byte):
        if self.find_value(byte, self.SPACES['EXCLUSIVE_OVERLOAD']):
            return True
        else:
            return False

    def reachable_by_extended_without_overload(self, byte):
        if self.find_value(byte, self.SPACES['EXTENDED_WITHOUT_OVERLOAD']):
            return True
        else:
            return False

    def get_exclusives(self):
        #MODIFIES ADDRESS (ORIGINAL)
        exclusives = set([])

        if not self.is_valid_range():
            #Not a valid target address
            raise OutOfRange

        has_overflowed = {1:False,2:False,3:False,4:False}
        change_byte = [None]
        #Check for exclusive overloads
        while change_byte != []:
            #Just entering in loop
            change_byte = []
            for i in reversed(range(1,5)):
                byte = self.address.bytes[i]
                if self.is_in_exlusive_overload_space(byte):
                    exclusives.add(i)
                    try:
                        #If I've already assigned the overflow do nothing
                        if not has_overflowed[i-1]:
                            change_byte = self.address.bytes[i-1] - 1
                            has_overflowed[i-1] = True
                            self.address.byte_change(i-1, change_byte)
                    except:
                        #byte doesnt exist or overflow out of bounds
                        raise CannotOverflow
                else:
                    try:
                        exclusive.remove(i)
                    except:
                        pass
                        #doesn't exist

        #If overflow increased it out of range then addition cannot be done
        if not self.is_valid_range():
            raise OutOfRange

        exclusives = list(exclusives)
        exclusives.sort()
        return exclusives

    def find_byte_addition(self, byte, requirements='regular', pos=None):
        #Might want to find a faster way but should be quick because of small
        #lists
        overloaded = False
        original = hex(self.address.original)[2:]
        
        if hex(byte)[2:] not in original:
            overloaded = False

        regular_pattern = self.PATTERNS['SINGLE_BYTE_PATTERN']
        #I don't think c3 will ever be required.
        overload = 0x0
        if requirements.lower() == 'c':
            pattern = [0xc2]
            pattern_type = requirements.lower()
        elif requirements.lower() == 'd':
            pattern = self.PATTERNS['D_BYTE_PATTERN'][:]
            pattern_type = requirements.lower()
        elif requirements.lower() == 'co':
            overload = 0x100
            pattern = [0xc2]
            pattern_type = requirements.lower()
        elif requirements.lower() == 'do':
            overload = 0x100
            pattern = self.PATTERNS['D_BYTE_PATTERN'][:]
            pattern_type = requirements.lower()
        else:
            #regular only.
            pattern = regular_pattern[:]
            pattern_type = 'regular'

        if pos == 1 and overload == 0x100:
            return None

        try:
            #Try to get pair if I already calculated
            pair = self.ADDITIONS[byte][pattern_type]
            return pair
        except:
            # #Calculate pair
            for o1 in regular_pattern:
                for o2 in pattern:
                    if o1 + o2 == byte + overload:
                        pair = (o1, o2)
                        #Add pair to reduce future calculations
                        try:
                            self.ADDITIONS[byte][pattern_type] = pair
                        except:
                            self.ADDITIONS[byte] = {pattern_type: pair}
                        return pair
        return None

    def find_addition(self):
        operand1 = {1:None, 2:None, 3:None, 4:None}
        operand2 = {1:None, 2:None, 3:None, 4:None}
        if self.is_valid_range():
            try:
                exclusives = self.get_exclusives()
            except:
                return None
            state = 0
            addition_type = 'regular'
            byte_list = [self.address.bytes[x] for x in range(1,5)]
            byte_pos = 4
            for b in reversed(byte_list):

                if byte_pos in exclusives:
                    if state == 0:
                        state = 1
                    elif state == 1:
                        state = 3
                    elif state == 3 or state == 2:
                        state = 1 
                else:
                    if state == 1:
                        state = 2
                    elif state == 2 or state == 3:
                        state = 0
                if state == 0:
                    addition_type = 'regular'
                elif state == 1:
                    addition_type = 'co'
                elif state == 2:
                    addition_type = 'd'
                elif state == 3:
                    addition_type = 'do'
                pair = self.find_byte_addition(self.address.bytes[byte_pos], addition_type, byte_pos)
                try:
                    operand1[byte_pos] = pair[0]
                    operand2[byte_pos] = pair[1]
                except:
                    #Pair returned None. No operand found
                    return None
                byte_pos -= 1
        else:
            return None

        op = ""
        for o in [operand1[x] for x in range(1,5)]:
            v = hex(o)[2:]
            if len(v) == 1:
                v = '0' + v
            op += v
        operand1 = op

        op = ""
        for o in [operand2[x] for x in range(1,5)]:
            v = hex(o)[2:]
            if len(v) == 1:
                v = '0' + v
            op += v
        operand2 = op

        return (int(operand1,16), int(operand2,16))

def main():
    #start = 0x2EF17638+100000
    start = 0x2ef300c0
    #start = 0x00ff0909
    #start = 0xFFFFFFFF
    finish = start + 100000#100000
    # offset = -(0x2EF17638)
    offset = 0

    tp = 0
    fp = 0
    fp_list = []
    n = 0
    n_list = []
    error = []
    for i, x in enumerate(xrange(start+offset, finish+1)):
        if i%1000==0:
            print "{0}, tp:{1}, fp{2}, n:{3}, ERRORS:{4}".format(i, tp, fp, n, len(error))
        analyzer = AdditionAnalyzer()
        address = HexAddress(x)
        analyzer.assign(address, 'target')
        try:
            result = analyzer.find_addition()
            if result == None:
                n += 1
                n_list.append(hex(x))
                continue

            if result:
                if result[0] + result[1] == x:
                    tp+=1
                else:
                    fp+=1
                    fp_list.append( [hex(x), hex(result[0]+result[1]), hex(result[0]), hex(result[1])] )
            else:
                n +=1
        except:
            error.append(x)
    print [hex(x) for x in error]
    # for i in n_list:
    #     print i

if __name__ == "__main__":
    main()




