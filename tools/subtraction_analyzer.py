import itertools
import copy
from hexaddress import *

class SubtractionAnalyzer:

    REACHABILITY = {
        #NOTICE WITH IS EXCLUSIVE TO UNDERFLOW VALUES. NON-UNDERFLOW NOT INCLUDED
        "WITH": {
            "reachable":  [0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
            "RR":   [0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
            "RC":   [0x46, 0x47, 0x48, 0x4a, 0x4b, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd],
            "RD":   [0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
            "CC":   [0xff],
            "DD":   [0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff],
            "CD":   [0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd]
        },
        'WITHOUT': {
            "reachable":  [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb8, 0xb9, 0xba],
            "RR":  [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76],
            "RC":  [0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xb5, 0xb6, 0xb8, 0xb9, 0xba],
            "RD":  [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6],
            "CC":  [0x0, 0x1],
            "DD":  [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f],
            "CD":  [0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43]
        }
    }

    SPACES = {
        # #All subtractions without Extended or underload
        'REGULAR':                    [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76],
        'UNDERLOAD':                       [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb8, 0xb9, 0xba],
        'EXTENDED_WITHOUT_UNDERLOAD': [0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb8, 0xb9, 0xba],
        
    }

    PATTERNS = {
        "SINGLE_BYTE_PATTERN": [0x9, 0xa, 0xd, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f], 
        "D_BYTE_PATTERN":        [0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf],
    }

    def __init__(self):
        self.address = None
        self.address_type = None
        self.patterns = {}
        for i in range(1,5):
            self.patterns[i] = {"WITH":[], "WITHOUT":[]}

        self.operands = {
            1:{"address":None, 
                "filters": {1:[],2:[],3:[],4:[]}
            },
            2:{"address":None,
                "filters": {1:[],2:[],3:[],4:[]}
            }}

    def assign(self, address, address_type="target"):
        self.address = address
        self.address_type = address_type.lower()

    def find_value(self, byte, byte_list):
        #Consider changing to bisect method
        if byte in byte_list:
            return True
        else:
            return False

    def is_valid_range(self):
        if self.address_type == 'target':
            lowest = 0x00000000
            highest = 0xB6BAB6BA
            if self.address.value >= lowest and self.address.value <= highest:
                return True
            else:
                return False
        elif self.address_type == 'operand':
            lowest = 0x09090909
            highest = 0xbfc3bfc3
            if self.address.value >= lowest and self.address.value <= highest:
                return True
            else:
                return False
        else:
            print "Invalid Address type"
            return False

    def is_reachable(self, byte, underload=None, pattern=None):
        if underload == None:
            #No underload. Check both 'with' and 'without'
            if pattern == None:
                return self.find_value(byte, self.REACHABILITY['WITH']['reachable']) or self.find_value(byte, self.REACHABILITY['WITHOUT']['reachable'])
            else:
                return self.find_value(byte, self.REACHABILITY['WITH'][pattern]) or self.find_value(byte, self.REACHABILITY['WITHOUT'][pattern])
        else:
            underload = "WITH" if underload else "WITHOUT"
            if pattern == None:
                return self.find_value(byte, self.REACHABILITY[underload]['reachable'])
            else:
                pattern = pattern.upper()
                return self.find_value(byte, self.REACHABILITY[underload][pattern])

    def assign_pattern(self, pos=None, analyzer=None):
        if not analyzer:
            analyzer = self

        if pos == None:
            return analyzer.assign_patterns()

        pattern = []
        for R in analyzer.REACHABILITY['WITH']:
            byte_list = analyzer.REACHABILITY['WITH'][R]
            if analyzer.find_value(analyzer.address.bytes[pos], byte_list):
                pattern.append(R)
                pattern = list(set(pattern))
                pattern.sort()
            analyzer.patterns[pos]['WITH'] = pattern
        pattern = []
        for R in analyzer.REACHABILITY['WITHOUT']:
            byte_list = analyzer.REACHABILITY['WITHOUT'][R]
            if analyzer.find_value(self.address.bytes[pos], byte_list):
                pattern.append(R)
                pattern = list(set(pattern))
                pattern.sort()
            analyzer.patterns[pos]['WITHOUT'] = pattern

    def assign_patterns(self, analyzer=None):
        if not analyzer:
            analyzer = self

        for r in range(1,5):
            analyzer.assign_pattern(pos=r)

    def valid_pattern(self):
        patterns = ['RR', 'uRR', 'RC', 'uRC', 'uRD', 'DD', 'uDD', 'CD', 'uCD', 'CC', 'uCC']

        #Notice this list is ordered.
        #I prefer non-underload values
        #before underload as those
        #addresses are easier to deal with.
        valid_pattern_list = [
        #NON-UNDERLOAD
        ['RR', 'RR', 'RR', 'RR'],  
        ['RR', 'RR', 'RD', 'RC'],
        ['RR', 'RD', 'RC', 'RR'],
        ['RD', 'RC', 'RR', 'RR'],
        ['RD', 'RC', 'RD', 'RC'],
        ['RR', 'RR', 'DD', 'CC'],
        ['RR', 'DD', 'CC', 'RR'],
        ['DD', 'CC', 'RR', 'RR'],
        ['DD', 'CC', 'DD', 'CC'],
        ['RD', 'RC', 'DD', 'CC'],
        ['DD', 'CC', 'RD', 'RC'],

        ['RR', 'RR', 'DD', 'RC'],
        ['RR', 'DD', 'RC', 'RR'],
        ['DD', 'RC', 'RR', 'RR'],
        ['DD', 'RC', 'DD', 'RC'],

        #UNDERLOAD
        ['RR', 'RR', 'RR', 'uRR'],
        ['RR', 'RR', 'uRR', 'RR'],
        ['RR', 'uRR', 'RR', 'RR'],
        ['RR', 'RR', 'uRR', 'uRR'],
        ['RR', 'uRR', 'RR', 'uRR'],
        ['RR', 'uRR', 'uRR', 'RR'],
        ['RR', 'uRR', 'uRR', 'uRR'],

        ['RR', 'RR', 'RD', 'uRC'],
        ['RR', 'RR', 'uRD', 'RC'],
        ['RR', 'uRR', 'RD', 'RC'],
        ['RR', 'RR', 'uRD', 'uRC'],
        ['RR', 'uRR', 'RD', 'uRC'],
        ['RR', 'uRR', 'uRD', 'RC'],
        ['RR', 'uRR', 'uRD', 'uRC'],

        ['RR', 'RD', 'RC', 'uRR'],
        ['RR', 'RD', 'uRC', 'RR'],
        ['RR', 'uRD', 'RC', 'RR'],
        ['RR', 'RD', 'uRC', 'uRR'],
        ['RR', 'uRD', 'RC', 'uRR'],
        ['RR', 'uRD', 'uRC', 'RR'],
        ['RR', 'uRD', 'uRC', 'uRR'],

        ['RD', 'RC', 'RR', 'uRR'],
        ['RD', 'RC', 'uRR', 'RR'],
        ['RD', 'uRC', 'RR', 'RR'],
        ['RD', 'RC', 'uRR', 'uRR'],
        ['RD', 'uRC', 'RR', 'uRR'],
        ['RD', 'uRC', 'uRR', 'RR'],
        ['RD', 'uRC', 'uRR', 'uRR'],

        ['RD', 'RC', 'RD', 'uRC'],
        ['RD', 'RC', 'uRD', 'RC'],
        ['RD', 'uRC', 'RD', 'RC'],
        ['RD', 'RC', 'uRD', 'uRC'],
        ['RD', 'uRC', 'RD', 'uRC'],
        ['RD', 'uRC', 'uRD', 'RC'],
        ['RD', 'uRC', 'uRD', 'uRC'],

        ['RR', 'RR', 'DD', 'uCC'],
        ['RR', 'RR', 'uDD', 'CC'],
        ['RR', 'uRR', 'DD', 'CC'],
        ['RR', 'RR', 'uDD', 'uCC'],
        ['RR', 'uRR', 'DD', 'uCC'],
        ['RR', 'uRR', 'uDD', 'CC'],
        ['RR', 'uRR', 'uDD', 'uCC'],

        ['RR', 'DD', 'CC', 'uRR'],
        ['RR', 'DD', 'uCC', 'RR'],
        ['RR', 'uDD', 'CC', 'RR'],
        ['RR', 'DD', 'uCC', 'uRR'],
        ['RR', 'uDD', 'CC', 'uRR'],
        ['RR', 'uDD', 'uCC', 'RR'],
        ['RR', 'uDD', 'uCC', 'uRR'],

        ['DD', 'CC', 'RR', 'uRR'],
        ['DD', 'CC', 'uRR', 'RR'],
        ['DD', 'uCC', 'RR', 'RR'],
        ['DD', 'CC', 'uRR', 'uRR'],
        ['DD', 'uCC', 'RR', 'uRR'],
        ['DD', 'uCC', 'uRR', 'RR'],
        ['DD', 'uCC', 'uRR', 'uRR'],

        ['DD', 'CC', 'DD', 'uCC'],
        ['DD', 'CC', 'uDD', 'CC'],
        ['DD', 'uCC', 'DD', 'CC'],
        ['DD', 'CC', 'uDD', 'uCC'],
        ['DD', 'uCC', 'DD', 'uCC'],
        ['DD', 'uCC', 'uDD', 'CC'],
        ['DD', 'uCC', 'uDD', 'uCC'],

        ['RD', 'RC', 'DD', 'uCC'],
        ['RD', 'RC', 'uDD', 'CC'],
        ['RD', 'uRC', 'DD', 'CC'],
        ['RD', 'RC', 'uDD', 'uCC'],
        ['RD', 'uRC', 'DD', 'uCC'],
        ['RD', 'uRC', 'uDD', 'CC'],
        ['RD', 'uRC', 'uDD', 'uCC'],

        ['DD', 'CC', 'RD', 'uRC'],
        ['DD', 'CC', 'uRD', 'RC'],
        ['DD', 'uCC', 'RD', 'RC'],
        ['DD', 'CC', 'uRD', 'uRC'],
        ['DD', 'uCC', 'RD', 'uRC'],
        ['DD', 'uCC', 'uRD', 'RC'],
        ['DD', 'uCC', 'uRD', 'uRC'],

        ['RR', 'RR', 'DD', 'uRC'],
        ['RR', 'RR', 'uDD', 'RC'],
        ['RR', 'uRR', 'DD', 'RC'],
        ['RR', 'RR', 'uDD', 'uRC'],
        ['RR', 'uRR', 'DD', 'uRC'],
        ['RR', 'uRR', 'uDD', 'RC'],
        ['RR', 'uRR', 'uDD', 'uRC'],

        ['RR', 'DD', 'RC', 'uRR'],
        ['RR', 'DD', 'uRC', 'RR'],
        ['RR', 'uDD', 'RC', 'RR'],
        ['RR', 'DD', 'uRC', 'uRR'],
        ['RR', 'uDD', 'RC', 'uRR'],
        ['RR', 'uDD', 'uRC', 'RR'],
        ['RR', 'uDD', 'uRC', 'uRR'],

        ['DD', 'RC', 'RR', 'uRR'],
        ['DD', 'RC', 'uRR', 'RR'],
        ['DD', 'uRC', 'RR', 'RR'],
        ['DD', 'RC', 'uRR', 'uRR'],
        ['DD', 'uRC', 'RR', 'uRR'],
        ['DD', 'uRC', 'uRR', 'RR'],
        ['DD', 'uRC', 'uRR', 'uRR'],

        ['DD', 'RC', 'DD', 'uRC'],
        ['DD', 'RC', 'uDD', 'RC'],
        ['DD', 'uRC', 'DD', 'RC'],
        ['DD', 'RC', 'uDD', 'uRC'],
        ['DD', 'uRC', 'DD', 'uRC'],
        ['DD', 'uRC', 'uDD', 'RC'],
        ['DD', 'uRC', 'uDD', 'uRC'],
        ]

        if not self.is_valid_range():
            return []

        self.assign_pattern()

        for p in valid_pattern_list:
            check = [False,False,False,False]
            for i in reversed(range(0,4)):
                byte = i+1
                if 'u' in p[i]:
                    if p[i][1:] in self.patterns[byte]['WITH']:
                        check[i] = p[i]
                elif p[i] in self.patterns[byte]['WITHOUT']:
                    check[i] = p[i]
                else:
                    break
            if False not in check:
                return check #Check was built backwards
        return []

    def find_subtraction(self, byte, byte_list, byte_list2=[], underflow=False):
        #If both operands come from the same list 
        #Just use byte_list
        #operands are unordered
        if byte_list2 == []:
            byte_list2 = byte_list[:]

        for b in byte_list:
            for b2 in byte_list2:
                calc1 = b - b2
                calc2 = b2 - b
                if underflow:
                    if calc1+0x100 == byte:
                        operand1 = b
                        operand2 = b2
                        return (operand1, operand2)
                    elif calc2+0x100 == byte:
                        operand1 = b2
                        operand2 = b
                        return (operand1, operand2)
                else:
                    if calc1 == byte:
                        operand1 = b
                        operand2 = b2
                        return (operand1, operand2)
                    elif calc2 == byte:
                        operand1 = b2
                        operand2 = b
                        return (operand1, operand2)
        return None


    def calculate_byte(self, byte, pattern, decriment=False, underflow=False):
        #decriment indicates whether or not this byte
        #needs decrimented because of a borrow.
        #underflow is whether this byte needs to
        #use the underflow space

        #+0x01 Because    if 01b-02b < 0 then
        #. O1a O1b           (01a-1) - 02a = Ta
        #.-O2a O2b             Which is equivalent to 
        #__________            01a - 02a = Ta + 1
        #  Ta  Tb
        #
        if decriment:
            byte = byte+0x1

        if 'u' in pattern:
            pattern = pattern[1:]
            underflow = True

        single_bytes = self.PATTERNS["SINGLE_BYTE_PATTERN"]
        d_byte_patterns = self.PATTERNS["D_BYTE_PATTERN"]
        c_byte_patterns = [0xc2,0xc3]

        if pattern == 'RR':
            return self.find_subtraction(byte, single_bytes, underflow=underflow)
        elif pattern == 'RC':
            return self.find_subtraction(byte, single_bytes, byte_list2=c_byte_patterns, underflow=underflow)
        elif pattern == 'RD':
            return self.find_subtraction(byte, single_bytes, byte_list2=d_byte_patterns, underflow=underflow)
        elif pattern == 'CC':
            return self.find_subtraction(byte, c_byte_patterns, byte_list2=c_byte_patterns, underflow=underflow)
        elif pattern == 'DD':
            return self.find_subtraction(byte, d_byte_patterns, byte_list2=d_byte_patterns, underflow=underflow)
        elif pattern == 'CD':
            return self.find_subtraction(byte, c_byte_patterns, byte_list2=d_byte_patterns, underflow=underflow)
        return None

    def append_leading_0(self, blist):
        list2 = blist[:]
        for x, b in enumerate(blist):
            if len(b) < 2:
                list2[x] = '0' + b
        return list2

    def get_operands(self):
        operand1 = []
        operand2 = []
        reachable_pattern = self.valid_pattern()
        decriment = False
        if reachable_pattern == []:
            return None

        for x, p in enumerate(reachable_pattern):
            try:
                if 'u' in reachable_pattern[x+1]:
                    decriment = True
            except: #
                pass
            byte = self.address.bytes[x+1]
            o = self.calculate_byte(byte, p, decriment=decriment)
            if o == None:
                return None
            operand1.append(o[0])
            operand2.append(o[1])
            decriment = False
        result = self.check_operands(operand1, operand2)
        return result

    def check_operands(self, bytes1, bytes2):
        op1 = None
        op2 = None
        try:
            op1 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
            op2 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        except:
            raise
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)

        op1 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)

        op1 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op2 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
        op2 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op2 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes1[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes2[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)
        

        op1 = [hex(bytes2[0])[2:], hex(bytes2[1])[2:], hex(bytes2[2])[2:], hex(bytes2[3])[2:]]
        op2 = [hex(bytes1[0])[2:], hex(bytes1[1])[2:], hex(bytes1[2])[2:], hex(bytes1[3])[2:]]
        op1 = self.append_leading_0(op1)
        op2 = self.append_leading_0(op2)
        opt1 = int("".join(op1),16)
        opt2 = int("".join(op2), 16)
        if opt1 - opt2 == self.address.original:
            return (opt1, opt2)

        return None

def main():
    start = 0x2EF17638
    #start = 0x00ff0909
    #start = 0xFFFFFFFF
    finish = start + 100000
    # offset = -(0x2EF17638
    offset = 0

    tp = 0
    fp = 0
    n = 0
    error = []
    for i, x in enumerate(xrange(start+offset, finish+1)):
        if i%1000==0:
            print "{0}, tp:{1}, fp{2}, n:{3}, ERRORS:{4}".format(i, tp, fp, n, len(error))
        analyzer = SubtractionAnalyzer()
        address = HexAddress(x)
        analyzer.assign(address, 'target')
        try:
            result = analyzer.get_operands()
            if result == None:
                n += 1
                continue

            if result:
                if result[0] - result[1] == x:
                    tp+=1
                else:
                    fp+=1
            else:
                n +=1
        except:
            error.append(x)
    print [hex(x) for x in error]

if __name__ == "__main__":
    main()


